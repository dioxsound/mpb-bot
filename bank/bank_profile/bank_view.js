import formatCurrency from "../../services/format_currency.js";

export default class BankProfileView {
    static bankResponse(user, bank, context) {
        if (!user || !bank) {
            return BankProfileView.infoNotFound(context, user);
        }

        const positionDictionary = {
            1: { name: "–ì–æ—Ä–µ–Ω–æ—Å–µ—Ü", emoji: "üßü‚Äç‚ôÇÔ∏è", pronouns: "—Ç–≤–æ–µ–º" },
            2: { name: "–ò–∑—É–≤–µ—Ä", emoji: "üé≠", pronouns: "—Ç–≤–æ–µ–º" },
            3: { name: "–ú–µ—Å—Ç–Ω—ã–π –ë–æ–≥", emoji: "‚õ©", pronouns: "—Ç–≤–æ–µ–º" },
            4: { name: "–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞", emoji: "ü´¥üèº", pronouns: "—Ç–≤–æ–µ–º" },
            5: { name: "–°–æ–∑–∏–¥–∞—Ç–µ–ª—å", emoji: "ü§¥üèª", pronouns: "–≤–∞—à–µ–º" },
        };

        const positionData = positionDictionary[user.user_position] || {
            name: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            emoji: "‚ùì",
            pronouns: "—Ç–≤–æ–µ–º",
        };
        const positionText = user.user_name ? user.user_name : positionData.name;
        const positionEmoji = positionData.emoji;
        const pronouns = positionData.pronouns;

        const formattedBankId = `${bank.bank_id.slice(0, 4)} ${bank.bank_id.slice(4, 8)} ${bank.bank_id.slice(
            8,
            12
        )} ${bank.bank_id.slice(12, 16)}`;

        const formattedAmount = formatCurrency(bank.bank_amount);

        let profileHeader;
        if (user.user_id == context.from.id) {
            profileHeader = `${positionEmoji} <b><a href="tg://user?id=${user.user_id}">${positionText}</a>, –¥–∞–Ω–Ω—ã–µ –æ ${pronouns} –±–∞–Ω–∫–µ:</b>`;
        } else {
            profileHeader = `<b>üè¶ –ë–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://user?id=${user.user_id}">${user.user_name}</a>:</b>`;
        }

        const bankInfo =
            `  ‚Äì   ${bank.bank_name || "–°–º–∏—Ä–Ω–æ—Ñ—Ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç (S-Bank)"}:\n` +
            `       <code>${formattedBankId}</code>\n` +
            `  ‚Äì   1-—ã–π —Å—á–µ—Ç: <code>${formattedAmount}</code>`;

        return context.send(profileHeader + "\n" + bankInfo, {
            parse_mode: "HTML",
        });
    }

    static infoNotFound(context, user) {
        return context.send(`<b>ü§∑üèº‚Äç‚ôÇÔ∏è –£–≤—ã, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ </b> <code>${user}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>`, {
            parse_mode: "HTML",
        });
    }

    static userNotFound(context) {
        return context.send(`<b>ü§∑üèº‚Äç‚ôÇÔ∏è –£–≤—ã, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>`, {
            parse_mode: "HTML",
        });
    }

    static bankNotFound(context) {
        return context.send(`<b>ü§∑üèº‚Äç‚ôÇÔ∏è –£–≤—ã, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>`, {
            parse_mode: "HTML",
        });
    }

    static errorFetchingProfile(context) {
        return context.send(`<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>`, {
            parse_mode: "HTML",
        });
    }
}
